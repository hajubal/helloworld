plugins {
	id 'org.springframework.boot' version '2.2.2.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	//id 'war'
	id 'org.hidetake.ssh' version '2.10.1'
}

group = 'com.ha'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

dependencies {
	compile('org.apache.tomcat.embed:tomcat-embed-jasper')
	compile('javax.servlet:jstl:1.2')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.apache.commons:commons-lang3:3.9')
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	//compile('org.springframework.boot:spring-boot-starter-hateoas')

	runtimeOnly('com.h2database:h2:1.4.193')
	
	developmentOnly('org.springframework.boot:spring-boot-devtools')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.thymeleaf.extras:thymeleaf-extras-springsecurity5')
	//providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

// 여러 task에서 사용할 수 있도록 build file 이름은 전역변수로 지정
project.ext{
    warBaseName = 'helloworld'
    warVersion = '0.0.1-'+ new Date().format('yyyyMMdd-HHmmss')
}

bootJar {
	baseName = project.warBaseName
    version = project.warVersion
    exclude("build/**")
    
    manifest {
        attributes 'Title': 'Hello world.',
                   'Version': project.warVersion,
                   'Main-Class': 'com.ha.helloworld.HelloworldApplication'
    }
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}


remotes {
    publicServer {
        host = project.properties["publicHost"]
        port = project.properties["publicPort"].toInteger()
        user = project.properties["publicUser"]
        password = project.properties["publicPassword"]
        knownHosts = allowAnyHosts //알 수 없는 호스트라도 접속 가능
    }
}

task scp {
	doLast {
	    ssh.run {
	        //remotes.publicServer으로 호스트 세션 시작
	        session(remotes.publicServer) {
	
	            // war 파일명을 로컬변수에 지정
	            //final warName = "C:/Users/hajubal/git/helloworld/README.md"
	            final warName = "README.md"
	            println "war 이름 : ${warName}"
	
	            println "public 서버 파일 전송 시작"
	            /*
	                from : 현재 폴더를 기준으로 from path 지정
	                into : 도착서버의 디렉토리 path 지정
	             */
	            put from: file("${warName}"), into: project.properties["publicDir"]
	            println "public 서버 파일 전송 완료"
	            //execute 'sudo service tomcat restart'
	        }
	    }
    }
}

test {
	useJUnitPlatform()
}

